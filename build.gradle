plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'groovy'
	id 'jacoco'
}

group = 'com.legacySoft'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}
sourceSets {
	integrationTest {
		groovy {
			compileClasspath += (main.output + test.output)
			runtimeClasspath += (main.output + test.output)
			srcDirs = [file('src/integrationTest/groovy')]
		}
		resources.srcDirs = [file('src/integrationTest/resources')]
	}
}
configurations {
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntime.extendsFrom testRuntime
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
/*	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'*/
	implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
	//implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	//testImplementation 'org.springframework.security:spring-security-test'

	// Logging
	implementation 'org.slf4j:slf4j-api'
	implementation 'ch.qos.logback:logback-classic'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Groovy and Spock
	testImplementation 'org.apache.groovy:groovy-all:5.0.0-alpha-1'
	testImplementation 'org.spockframework:spock-spring:2.4-M4-groovy-4.0'
	testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'

	// Swagger / Openapi
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'
	implementation 'org.springdoc:springdoc-openapi-ui:1.8.0'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging{
		events = ['FAILED','SKIPPED']
		exceptionFormat = 'full'
	}
}

def coverageExcludeList = [
		'**/model/**',
		'com/api/movie/MovieApplication.java',
		'**/constant/**',
		'**/config/**'
]

task integrationTest(type: Test) {
	description = 'Runs integration tests.'
	useJUnitPlatform()
	testLogging {
		exceptionFormat = 'full'
		showStandardStreams = true
	}
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.20
			}
		}
	}
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: coverageExcludeList)
	}))
	sourceDirectories.setFrom(files(sourceDirectories.files.collect {
		fileTree(dir: it, exclude: coverageExcludeList)
	}))
}

check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
	dependsOn test
	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: coverageExcludeList)
	}))
	sourceDirectories.setFrom(files(sourceDirectories.files.collect {
		fileTree(dir: it, exclude: coverageExcludeList)
	}))
	reports {
		xml.required = true
	}
}

test.finalizedBy(project.tasks.jacocoTestReport)